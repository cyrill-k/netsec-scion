package main

import (
	"fmt"
	"time"
	
	"github.com/scionproto/scion/go/flowtele/dbus"
)

func main() {
	// var fdbus fshaperDbus
	fdbus := flowteledbus.NewFshaperDbus()
	// dbus setup
	fdbus.OpenSessionBus()
	defer fdbus.Close()

	// start QUIC instances
	var i int32
	for i = 0; i < 3; i++ {
		go func(flowId int32) {
			qdbus := flowteledbus.NewQuicDbus(flowId)
			qdbus.OpenSessionBus()
			defer qdbus.Close()
			qdbus.Register()
			fmt.Println("Sending rtt signal every 2 seconds ...")
			counter := uint32(0)
			for {
				select {
				case <-time.After(2*time.Second):
					qdbus.SendCwndSignal(time.Now(), counter, 42)
					counter += 1
				}
			}
		}(i)
	}

	// register method and listeners
	fdbus.Register()

	// listen for feedback from QUIC instances and forward to athena
	for v := range fdbus.SignalListener {
		if fdbus.Conn.Names()[0] == v.Sender {
			fdbus.Log("ignore signal %s generated by socket", v.Name)
		} else {
			fdbus.Log("forwarding signal...")
			fdbus.Send(flowteledbus.CreateFshaperDbusSignal(v))
		}
	}
}
