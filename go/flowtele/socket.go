package main

import (
	"fmt"
	"time"
	"net"
	
	"github.com/scionproto/scion/go/flowtele/dbus"
)

func main() {
	// var fdbus fshaperDbus
	fdbus := flowteledbus.NewFshaperDbus()
	// dbus setup
	fdbus.OpenSessionBus()
	defer fdbus.Close()

	// start QUIC instances
	nUsers := 11
	// TODO(cyrill) read flow specs from config/user_X.json
	remoteIp := net.ParseIP("127.0.0.1")
	remoteAddresses := []net.UDPAddr{}
	startPort := 5500
	for ui := 0; ui < nUsers; ui++ {
		remoteAddresses = append(remoteAddresses, net.UDPAddr{IP: remoteIp, Port: startPort+ui})
	}

	for di, addr := range remoteAddresses {
		go func(remoteAddress net.UDPAddr, flowId int32) {
			qdbus := flowteledbus.NewQuicDbus(flowId)
			qdbus.OpenSessionBus()
			defer qdbus.Close()
			qdbus.Register()
			secs := uint(1)
			fmt.Printf("Sending rtt signal every %d seconds ...\n", secs)
			counter := uint32(0)
			for {
				select {
				case <-time.After(time.Second):
					qdbus.SendCwndSignal(time.Now(), counter, 42)
					counter += 1
				}
			}
		}(addr, int32(di))
	}

	// register method and listeners
	fdbus.Register()

	// listen for feedback from QUIC instances and forward to athena
	for v := range fdbus.SignalListener {
		if fdbus.Conn.Names()[0] == v.Sender {
			fdbus.Log("ignore signal %s generated by socket", v.Name)
		} else {
			fdbus.Log("forwarding signal...")
			fdbus.Send(flowteledbus.CreateFshaperDbusSignal(v))
		}
	}
}
